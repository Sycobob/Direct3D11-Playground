//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Tess
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_output o0.xyz
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 51 "C:\Users\Adam\Desktop\D3D11 Luna Samples\Chapter 13 The Tessellation Stages\BezierPatch\FX\BezierTessellation.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.PosL.x; r0.y <- vout.PosL.y; r0.z <- vout.PosL.z
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                          16
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 16
                dcl_output_control_point_count 16
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[16][0].xyz
                dcl_output o0.xyz
                dcl_temps 1
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o0.x <- <HS return value>.PosL.x; o0.y <- <HS return value>.PosL.y; o0.z <- <HS return value>.PosL.z; 
                //   v[0][0].x <- p[0].PosL.x; v[0][0].y <- p[0].PosL.y; v[0][0].z <- p[0].PosL.z; 
                //   v[1][0].x <- p[1].PosL.x; v[1][0].y <- p[1].PosL.y; v[1][0].z <- p[1].PosL.z; 
                //   v[2][0].x <- p[2].PosL.x; v[2][0].y <- p[2].PosL.y; v[2][0].z <- p[2].PosL.z; 
                //   v[3][0].x <- p[3].PosL.x; v[3][0].y <- p[3].PosL.y; v[3][0].z <- p[3].PosL.z; 
                //   v[4][0].x <- p[4].PosL.x; v[4][0].y <- p[4].PosL.y; v[4][0].z <- p[4].PosL.z; 
                //   v[5][0].x <- p[5].PosL.x; v[5][0].y <- p[5].PosL.y; v[5][0].z <- p[5].PosL.z; 
                //   v[6][0].x <- p[6].PosL.x; v[6][0].y <- p[6].PosL.y; v[6][0].z <- p[6].PosL.z; 
                //   v[7][0].x <- p[7].PosL.x; v[7][0].y <- p[7].PosL.y; v[7][0].z <- p[7].PosL.z; 
                //   v[8][0].x <- p[8].PosL.x; v[8][0].y <- p[8].PosL.y; v[8][0].z <- p[8].PosL.z; 
                //   v[9][0].x <- p[9].PosL.x; v[9][0].y <- p[9].PosL.y; v[9][0].z <- p[9].PosL.z; 
                //   v[10][0].x <- p[10].PosL.x; v[10][0].y <- p[10].PosL.y; v[10][0].z <- p[10].PosL.z; 
                //   v[11][0].x <- p[11].PosL.x; v[11][0].y <- p[11].PosL.y; v[11][0].z <- p[11].PosL.z; 
                //   v[12][0].x <- p[12].PosL.x; v[12][0].y <- p[12].PosL.y; v[12][0].z <- p[12].PosL.z; 
                //   v[13][0].x <- p[13].PosL.x; v[13][0].y <- p[13].PosL.y; v[13][0].z <- p[13].PosL.z; 
                //   v[14][0].x <- p[14].PosL.x; v[14][0].y <- p[14].PosL.y; v[14][0].z <- p[14].PosL.z; 
                //   v[15][0].x <- p[15].PosL.x; v[15][0].y <- p[15].PosL.y; v[15][0].z <- p[15].PosL.z
                //
                #line 98 "C:\Users\Adam\Desktop\D3D11 Luna Samples\Chapter 13 The Tessellation Stages\BezierPatch\FX\BezierTessellation.fx"
                mov r0.x, vOutputControlPointID
                mov r0.xyz, v[r0.x + 0][0].xyzx  // r0.x <- hout.PosL.x; r0.y <- hout.PosL.y; r0.z <- hout.PosL.z
                mov o0.xyz, r0.xyzx
                ret 
                hs_join_phase 
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 2
                
                #line 68
                itof r0.x, l(25)  // r0.x <- pt.EdgeTess[0]
                itof r0.y, l(25)  // r0.y <- pt.EdgeTess[1]
                itof r1.x, l(25)  // r1.x <- pt.EdgeTess[2]
                itof r1.y, l(25)  // r1.y <- pt.EdgeTess[3]
                itof r1.z, l(25)  // r1.z <- pt.InsideTess[0]
                itof r1.w, l(25)  // r1.w <- pt.InsideTess[1]
                mov r1.x, r1.x  // r1.x <- <ConstantHS return value>.EdgeTess[2]
                mov r1.y, r1.y  // r1.y <- <ConstantHS return value>.EdgeTess[3]
                mov r1.z, r1.z  // r1.z <- <ConstantHS return value>.InsideTess[0]
                mov r1.w, r1.w  // r1.w <- <ConstantHS return value>.InsideTess[1]
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.EdgeTess[0]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.EdgeTess[1]
                min o0.x, r0.x, l(64.000000)
                min o1.x, r0.y, l(64.000000)
                min r0.xyzw, r1.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // r0.x <- <ConstantHS return value>.EdgeTess[2]; r0.y <- <ConstantHS return value>.EdgeTess[3]; r0.z <- <ConstantHS return value>.InsideTess[0]; r0.w <- <ConstantHS return value>.InsideTess[1]
                mov o2.x, r0.x
                mov o3.x, r0.y
                mov o4.x, r0.z
                mov o5.x, r0.w
                ret 
                // Approximately 24 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                          16
                //
                ds_5_0
                dcl_input_control_point_count 16
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input vDomain.xy
                dcl_input vicp[16][0].xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vpc3.x <- patchTess.EdgeTess[3]; 
                //   vpc4.x <- patchTess.InsideTess[0]; 
                //   vpc5.x <- patchTess.InsideTess[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- bezPatch[0].PosL.x; vicp[0][0].y <- bezPatch[0].PosL.y; vicp[0][0].z <- bezPatch[0].PosL.z; 
                //   vicp[1][0].x <- bezPatch[1].PosL.x; vicp[1][0].y <- bezPatch[1].PosL.y; vicp[1][0].z <- bezPatch[1].PosL.z; 
                //   vicp[2][0].x <- bezPatch[2].PosL.x; vicp[2][0].y <- bezPatch[2].PosL.y; vicp[2][0].z <- bezPatch[2].PosL.z; 
                //   vicp[3][0].x <- bezPatch[3].PosL.x; vicp[3][0].y <- bezPatch[3].PosL.y; vicp[3][0].z <- bezPatch[3].PosL.z; 
                //   vicp[4][0].x <- bezPatch[4].PosL.x; vicp[4][0].y <- bezPatch[4].PosL.y; vicp[4][0].z <- bezPatch[4].PosL.z; 
                //   vicp[5][0].x <- bezPatch[5].PosL.x; vicp[5][0].y <- bezPatch[5].PosL.y; vicp[5][0].z <- bezPatch[5].PosL.z; 
                //   vicp[6][0].x <- bezPatch[6].PosL.x; vicp[6][0].y <- bezPatch[6].PosL.y; vicp[6][0].z <- bezPatch[6].PosL.z; 
                //   vicp[7][0].x <- bezPatch[7].PosL.x; vicp[7][0].y <- bezPatch[7].PosL.y; vicp[7][0].z <- bezPatch[7].PosL.z; 
                //   vicp[8][0].x <- bezPatch[8].PosL.x; vicp[8][0].y <- bezPatch[8].PosL.y; vicp[8][0].z <- bezPatch[8].PosL.z; 
                //   vicp[9][0].x <- bezPatch[9].PosL.x; vicp[9][0].y <- bezPatch[9].PosL.y; vicp[9][0].z <- bezPatch[9].PosL.z; 
                //   vicp[10][0].x <- bezPatch[10].PosL.x; vicp[10][0].y <- bezPatch[10].PosL.y; vicp[10][0].z <- bezPatch[10].PosL.z; 
                //   vicp[11][0].x <- bezPatch[11].PosL.x; vicp[11][0].y <- bezPatch[11].PosL.y; vicp[11][0].z <- bezPatch[11].PosL.z; 
                //   vicp[12][0].x <- bezPatch[12].PosL.x; vicp[12][0].y <- bezPatch[12].PosL.y; vicp[12][0].z <- bezPatch[12].PosL.z; 
                //   vicp[13][0].x <- bezPatch[13].PosL.x; vicp[13][0].y <- bezPatch[13].PosL.y; vicp[13][0].z <- bezPatch[13].PosL.z; 
                //   vicp[14][0].x <- bezPatch[14].PosL.x; vicp[14][0].y <- bezPatch[14].PosL.y; vicp[14][0].z <- bezPatch[14].PosL.z; 
                //   vicp[15][0].x <- bezPatch[15].PosL.x; vicp[15][0].y <- bezPatch[15].PosL.y; vicp[15][0].z <- bezPatch[15].PosL.z
                //
                #line 148 "C:\Users\Adam\Desktop\D3D11 Luna Samples\Chapter 13 The Tessellation Stages\BezierPatch\FX\BezierTessellation.fx"
                nop 
                mov r0.x, vDomain.x
                
                #line 110
                mov r0.y, -r0.x
                add r0.y, r0.y, l(1.000000)  // r0.y <- invT
                mul r0.z, r0.y, r0.y
                mul r1.x, r0.y, r0.z  // r1.x <- <BernsteinBasis return value>.x
                mul r0.z, r0.x, l(3.000000)
                mul r0.z, r0.y, r0.z
                mul r1.y, r0.y, r0.z  // r1.y <- <BernsteinBasis return value>.y
                mul r0.z, r0.x, l(3.000000)
                mul r0.z, r0.x, r0.z
                mul r1.z, r0.y, r0.z  // r1.z <- <BernsteinBasis return value>.z
                mul r0.y, r0.x, r0.x
                mul r1.w, r0.x, r0.y  // r1.w <- <BernsteinBasis return value>.w
                
                #line 148
                mov r1.xyzw, r1.xyzw  // r1.x <- basisU.x; r1.y <- basisU.y; r1.z <- basisU.z; r1.w <- basisU.w
                nop 
                mov r0.x, vDomain.y
                
                #line 110
                mov r0.y, -r0.x
                add r0.y, r0.y, l(1.000000)  // r0.y <- invT
                mul r0.z, r0.y, r0.y
                mul r2.x, r0.y, r0.z  // r2.x <- <BernsteinBasis return value>.x
                mul r0.z, r0.x, l(3.000000)
                mul r0.z, r0.y, r0.z
                mul r2.y, r0.y, r0.z  // r2.y <- <BernsteinBasis return value>.y
                mul r0.z, r0.x, l(3.000000)
                mul r0.z, r0.x, r0.z
                mul r2.z, r0.y, r0.z  // r2.z <- <BernsteinBasis return value>.z
                mul r0.y, r0.x, r0.x
                mul r2.w, r0.x, r0.y  // r2.w <- <BernsteinBasis return value>.w
                
                #line 149
                mov r2.xyzw, r2.xyzw  // r2.x <- basisV.x; r2.y <- basisV.y; r2.z <- basisV.z; r2.w <- basisV.w
                nop 
                mov r1.xyzw, r1.xyzw
                mov r2.xyzw, r2.xyzw
                
                #line 121
                mul r0.xyz, r1.xxxx, vicp[0][0].xyzx
                mul r3.xyz, r1.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, r1.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, r1.wwww, vicp[3][0].xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xxxx  // r0.x <- sum.x; r0.y <- sum.y; r0.z <- sum.z
                mul r3.xyz, r1.xxxx, vicp[4][0].xyzx
                mul r4.xyz, r1.yyyy, vicp[5][0].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, r1.zzzz, vicp[6][0].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, r1.wwww, vicp[7][0].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r3.xyz, r2.yyyy, r3.xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, r1.xxxx, vicp[8][0].xyzx
                mul r4.xyz, r1.yyyy, vicp[9][0].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, r1.zzzz, vicp[10][0].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, r1.wwww, vicp[11][0].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.zzzz, r3.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r2.xyz, r1.xxxx, vicp[12][0].xyzx
                mul r3.xyz, r1.yyyy, vicp[13][0].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r1.xyz, r1.zzzz, vicp[14][0].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, r1.wwww, vicp[15][0].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, r2.wwww
                add r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, r0.xyzx  // r0.x <- <CubicBezierSum return value>.x; r0.y <- <CubicBezierSum return value>.y; r0.z <- <CubicBezierSum return value>.z
                
                #line 151
                mov r0.xyz, r0.xyzx  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // r1.x <- dout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // r1.y <- dout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // r1.z <- dout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // r1.w <- dout.PosH.w
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 77 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 160 "C:\Users\Adam\Desktop\D3D11 Luna Samples\Chapter 13 The Tessellation Stages\BezierPatch\FX\BezierTessellation.fx"
                mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

