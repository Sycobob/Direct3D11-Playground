//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
    float   gHeightScale0;              // Offset:  240, size:    4
    float   gHeightScale1;              // Offset:  244, size:    4
    float   gMaxTessDistance;           // Offset:  248, size:    4
    float   gMinTessDistance;           // Offset:  252, size:    4
    float   gMinTessFactor;             // Offset:  256, size:    4
    float   gMaxTessFactor;             // Offset:  260, size:    4
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gWorldViewProj;            // Offset:  192, size:   64
    float4x4 gTexTransform;             // Offset:  256, size:   64
    float4x4 gWaveDispTexTransform0;    // Offset:  320, size:   64
    float4x4 gWaveDispTexTransform1;    // Offset:  384, size:   64
    float4x4 gWaveNormalTexTransform0;  // Offset:  448, size:   64
    float4x4 gWaveNormalTexTransform1;  // Offset:  512, size:   64
    Material gMaterial;                 // Offset:  576, size:   64
}

//
// 5 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap0;
Texture2D gNormalMap1;
TextureCube gCubeMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 44 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 131 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 168 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 205 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 243 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r0.w, cb0[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 131 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 168 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 205 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 243 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 250
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r0.w, cb0[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 136 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 173 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 291
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 210 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 140 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 177 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 214 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 230 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 233
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 309
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 312
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r1.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 21 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 140 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 177 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 214 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 230 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 233
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 250
                mov r0.y, l(-0.100000)
                add r0.y, r0.y, r1.w
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard_nz r0.y
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 309
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 312
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r1.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 26 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 145 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 182 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[39], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                mul r1.xyz, r7.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                mul r0.xyz, r8.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                movc r1.xyz, r3.wwww, r1.xyzx, r13.xyzx
                movc r0.xyz, r3.wwww, r0.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r1.xyz, r1.xyzx  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z
                mov r0.xyz, r0.xyzx  // r0.x <- S.x; r0.y <- S.y; r0.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z
                
                #line 291
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 219 instruction slots used
                            
            };
        }

    }

    technique11 Light1Reflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t2.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 141 instruction slots used
                            
            };
        }

    }

    technique11 Light2Reflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t2.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 178 instruction slots used
                            
            };
        }

    }

    technique11 Light3Reflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t2.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 215 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 243 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r0.w, cb0[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 141 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 178 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 215 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 243 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 250
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r0.w, cb0[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 146 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 183 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r0.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r0.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r0.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r0.w, r5.xyzx, r5.xyzx
                rsq r0.w, r0.w
                mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r0.w, r1.xyzx, r0.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 220 instruction slots used
                            
            };
        }

    }

    technique11 Light1FogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t2.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 150 instruction slots used
                            
            };
        }

    }

    technique11 Light2FogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t2.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 187 instruction slots used
                            
            };
        }

    }

    technique11 Light3FogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 239
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t2.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 224 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 230 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 233
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 309
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 312
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r1.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 21 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 150 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 187 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 224 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float       
                // TEXCOORD                 4   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[38], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 230 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // r0.x <- toEye.x; r0.y <- toEye.y; r0.z <- toEye.z
                
                #line 233
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- distToEye
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                
                #line 250
                mov r0.y, l(-0.100000)
                add r0.y, r0.y, r1.w
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard_nz r0.y
                
                #line 259
                nop 
                
                #line 262
                nop 
                
                #line 270
                mov r1.xyz, r1.xyzx  // r1.x <- litColor.x; r1.y <- litColor.y; r1.z <- litColor.z
                
                #line 309
                mov r0.y, -cb0[12].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- fogLerp
                
                #line 312
                mov r0.yzw, -r1.xxyz
                add r0.yzw, r0.yyzw, cb0[14].xxyz
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 316
                mul r0.w, r1.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 26 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 155 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 192 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFogReflect
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4
                //   float gMinTessDistance;            // Offset:  252 Size:     4
                //   float gMinTessFactor;              // Offset:  256 Size:     4
                //   float gMaxTessFactor;              // Offset:  260 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[34], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.z
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   o5.x <- <VS return value>.WaveNormalTex1.x; o5.y <- <VS return value>.WaveNormalTex1.y; o5.z <- <VS return value>.TessFactor; 
                //   o4.x <- <VS return value>.WaveDispTex1.x; o4.y <- <VS return value>.WaveDispTex1.y; o4.z <- <VS return value>.WaveNormalTex0.x; o4.w <- <VS return value>.WaveNormalTex0.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.WaveDispTex0.x; o3.w <- <VS return value>.WaveDispTex0.y; 
                //   o2.x <- <VS return value>.TangentW.x; o2.y <- <VS return value>.TangentW.y; o2.z <- <VS return value>.TangentW.z; 
                //   o1.x <- <VS return value>.NormalW.x; o1.y <- <VS return value>.NormalW.y; o1.z <- <VS return value>.NormalW.z; 
                //   o0.x <- <VS return value>.PosW.x; o0.y <- <VS return value>.PosW.y; o0.z <- <VS return value>.PosW.z
                //
                #line 77 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                dp3 r2.x, v3.xyzx, cb1[0].xyzx  // r2.x <- vout.TangentW.x
                dp3 r2.y, v3.xyzx, cb1[1].xyzx  // r2.y <- vout.TangentW.y
                dp3 r2.z, v3.xyzx, cb1[2].xyzx  // r2.z <- vout.TangentW.z
                
                #line 82
                mov r3.xy, v2.xyxx
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r4.x, r3.xyzw, cb1[16].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r3.xyzw, cb1[17].xyzw  // r4.y <- vout.Tex.y
                dp4 r4.z, r3.xyzw, cb1[20].xyzw  // r4.z <- vout.WaveDispTex0.x
                dp4 r4.w, r3.xyzw, cb1[21].xyzw  // r4.w <- vout.WaveDispTex0.y
                dp4 r5.x, r3.xyzw, cb1[24].xyzw  // r5.x <- vout.WaveDispTex1.x
                dp4 r5.y, r3.xyzw, cb1[25].xyzw  // r5.y <- vout.WaveDispTex1.y
                dp4 r5.z, r3.xyzw, cb1[28].xyzw  // r5.z <- vout.WaveNormalTex0.x
                dp4 r5.w, r3.xyzw, cb1[29].xyzw  // r5.w <- vout.WaveNormalTex0.y
                dp4 r6.x, r3.xyzw, cb1[32].xyzw  // r6.x <- vout.WaveNormalTex1.x
                dp4 r6.y, r3.xyzw, cb1[33].xyzw  // r6.y <- vout.WaveNormalTex1.y
                mov r3.xyz, -cb0[12].xyzx
                add r3.xyz, r1.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 94
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[15].w
                mov r1.w, -cb0[15].z
                add r1.w, r1.w, cb0[15].w
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 97
                mov r1.w, -cb0[16].x
                add r1.w, r1.w, cb0[16].y
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[16].x  // r0.w <- vout.TessFactor
                mov o3.xy, r4.xyxx
                mov o3.zw, r4.zzzw
                mov o4.xy, r5.xyxx
                mov o4.zw, r5.zzzw
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r6.xyxx
                mov o5.z, r0.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                // TESS                     0     z         5     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xy
                dcl_input v[3][3].zw
                dcl_input v[3][4].xy
                dcl_input v[3][4].zw
                dcl_input v[3][5].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.WaveNormalTex1.x; o5.y <- <HS return value>.WaveNormalTex1.y; 
                //   o4.x <- <HS return value>.WaveDispTex1.x; o4.y <- <HS return value>.WaveDispTex1.y; o4.z <- <HS return value>.WaveNormalTex0.x; o4.w <- <HS return value>.WaveNormalTex0.y; 
                //   o3.x <- <HS return value>.Tex.x; o3.y <- <HS return value>.Tex.y; o3.z <- <HS return value>.WaveDispTex0.x; o3.w <- <HS return value>.WaveDispTex0.y; 
                //   o2.x <- <HS return value>.TangentW.x; o2.y <- <HS return value>.TangentW.y; o2.z <- <HS return value>.TangentW.z; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].TangentW.x; v[0][2].y <- p[0].TangentW.y; v[0][2].z <- p[0].TangentW.z; 
                //   v[0][3].x <- p[0].Tex.x; v[0][3].y <- p[0].Tex.y; v[0][3].z <- p[0].WaveDispTex0.x; v[0][3].w <- p[0].WaveDispTex0.y; 
                //   v[0][4].x <- p[0].WaveDispTex1.x; v[0][4].y <- p[0].WaveDispTex1.y; v[0][4].z <- p[0].WaveNormalTex0.x; v[0][4].w <- p[0].WaveNormalTex0.y; 
                //   v[0][5].x <- p[0].WaveNormalTex1.x; v[0][5].y <- p[0].WaveNormalTex1.y; v[0][5].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].TangentW.x; v[1][2].y <- p[1].TangentW.y; v[1][2].z <- p[1].TangentW.z; 
                //   v[1][3].x <- p[1].Tex.x; v[1][3].y <- p[1].Tex.y; v[1][3].z <- p[1].WaveDispTex0.x; v[1][3].w <- p[1].WaveDispTex0.y; 
                //   v[1][4].x <- p[1].WaveDispTex1.x; v[1][4].y <- p[1].WaveDispTex1.y; v[1][4].z <- p[1].WaveNormalTex0.x; v[1][4].w <- p[1].WaveNormalTex0.y; 
                //   v[1][5].x <- p[1].WaveNormalTex1.x; v[1][5].y <- p[1].WaveNormalTex1.y; v[1][5].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].TangentW.x; v[2][2].y <- p[2].TangentW.y; v[2][2].z <- p[2].TangentW.z; 
                //   v[2][3].x <- p[2].Tex.x; v[2][3].y <- p[2].Tex.y; v[2][3].z <- p[2].WaveDispTex0.x; v[2][3].w <- p[2].WaveDispTex0.y; 
                //   v[2][4].x <- p[2].WaveDispTex1.x; v[2][4].y <- p[2].WaveDispTex1.y; v[2][4].z <- p[2].WaveNormalTex0.x; v[2][4].w <- p[2].WaveNormalTex0.y; 
                //   v[2][5].x <- p[2].WaveNormalTex1.x; v[2][5].y <- p[2].WaveNormalTex1.y; v[2][5].z <- p[2].TessFactor
                //
                #line 150 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.TangentW.x; r2.y <- hout.TangentW.y; r2.z <- hout.TangentW.z
                mov r3.xy, v[r0.x + 0][3].xyxx  // r3.x <- hout.Tex.x; r3.y <- hout.Tex.y
                mov r3.zw, v[r0.x + 0][3].zzzw  // r3.z <- hout.WaveDispTex0.x; r3.w <- hout.WaveDispTex0.y
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.WaveDispTex1.x; r4.y <- hout.WaveDispTex1.y
                mov r4.zw, v[r0.x + 0][4].zzzw  // r4.z <- hout.WaveNormalTex0.x; r4.w <- hout.WaveNormalTex0.y
                mov r5.xy, v[r0.x + 0][5].xyxx  // r5.x <- hout.WaveNormalTex1.x; r5.y <- hout.WaveNormalTex1.y
                mov o3.xy, r3.xyxx
                mov o3.zw, r3.zzzw
                mov o4.xy, r4.xyxx
                mov o4.zw, r4.zzzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o5.xy, r5.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][5].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 118
                add r0.x, vicp[2][5].z, vicp[1][5].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][5].z, vicp[2][5].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][5].z, vicp[0][5].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 30 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gHeightScale0;               // Offset:  240 Size:     4
                //   float gHeightScale1;               // Offset:  244 Size:     4
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gNormalMap0                       texture  float4          2d    0        1
                // gNormalMap1                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     zw
                // TEXCOORD                 2   xy          4     NONE   float   xy  
                // TEXCOORD                 3     zw        4     NONE   float     zw
                // TEXCOORD                 4   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float     zw
                // TEXCOORD                 2   xy          5     NONE   float   xy  
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xy
                dcl_input vicp[3][3].zw
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][4].zw
                dcl_input vicp[3][5].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o4.zw
                dcl_output o5.xy
                dcl_output o5.zw
                dcl_output o6.xy
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.WaveNormalTex1.x; o6.y <- <DS return value>.WaveNormalTex1.y; 
                //   o5.x <- <DS return value>.WaveDispTex1.x; o5.y <- <DS return value>.WaveDispTex1.y; o5.z <- <DS return value>.WaveNormalTex0.x; o5.w <- <DS return value>.WaveNormalTex0.y; 
                //   o4.x <- <DS return value>.Tex.x; o4.y <- <DS return value>.Tex.y; o4.z <- <DS return value>.WaveDispTex0.x; o4.w <- <DS return value>.WaveDispTex0.y; 
                //   o3.x <- <DS return value>.TangentW.x; o3.y <- <DS return value>.TangentW.y; o3.z <- <DS return value>.TangentW.z; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].TangentW.x; vicp[0][2].y <- tri[0].TangentW.y; vicp[0][2].z <- tri[0].TangentW.z; 
                //   vicp[0][3].x <- tri[0].Tex.x; vicp[0][3].y <- tri[0].Tex.y; vicp[0][3].z <- tri[0].WaveDispTex0.x; vicp[0][3].w <- tri[0].WaveDispTex0.y; 
                //   vicp[0][4].x <- tri[0].WaveDispTex1.x; vicp[0][4].y <- tri[0].WaveDispTex1.y; vicp[0][4].z <- tri[0].WaveNormalTex0.x; vicp[0][4].w <- tri[0].WaveNormalTex0.y; 
                //   vicp[0][5].x <- tri[0].WaveNormalTex1.x; vicp[0][5].y <- tri[0].WaveNormalTex1.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].TangentW.x; vicp[1][2].y <- tri[1].TangentW.y; vicp[1][2].z <- tri[1].TangentW.z; 
                //   vicp[1][3].x <- tri[1].Tex.x; vicp[1][3].y <- tri[1].Tex.y; vicp[1][3].z <- tri[1].WaveDispTex0.x; vicp[1][3].w <- tri[1].WaveDispTex0.y; 
                //   vicp[1][4].x <- tri[1].WaveDispTex1.x; vicp[1][4].y <- tri[1].WaveDispTex1.y; vicp[1][4].z <- tri[1].WaveNormalTex0.x; vicp[1][4].w <- tri[1].WaveNormalTex0.y; 
                //   vicp[1][5].x <- tri[1].WaveNormalTex1.x; vicp[1][5].y <- tri[1].WaveNormalTex1.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].TangentW.x; vicp[2][2].y <- tri[2].TangentW.y; vicp[2][2].z <- tri[2].TangentW.z; 
                //   vicp[2][3].x <- tri[2].Tex.x; vicp[2][3].y <- tri[2].Tex.y; vicp[2][3].z <- tri[2].WaveDispTex0.x; vicp[2][3].w <- tri[2].WaveDispTex0.y; 
                //   vicp[2][4].x <- tri[2].WaveDispTex1.x; vicp[2][4].y <- tri[2].WaveDispTex1.y; vicp[2][4].z <- tri[2].WaveNormalTex0.x; vicp[2][4].w <- tri[2].WaveNormalTex0.y; 
                //   vicp[2][5].x <- tri[2].WaveNormalTex1.x; vicp[2][5].y <- tri[2].WaveNormalTex1.y
                //
                #line 185 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.TangentW.x; r2.y <- dout.TangentW.y; r2.z <- dout.TangentW.z
                mul r3.xy, vDomain.xxxx, vicp[0][3].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][3].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // r3.x <- dout.Tex.x; r3.y <- dout.Tex.y
                mul r3.zw, vDomain.xxxx, vicp[0][3].zzzw
                mul r4.xy, vDomain.yyyy, vicp[1][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy
                mul r4.xy, vDomain.zzzz, vicp[2][3].zwzz
                add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- dout.WaveDispTex0.x; r3.w <- dout.WaveDispTex0.y
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.WaveDispTex1.x; r4.y <- dout.WaveDispTex1.y
                mul r4.zw, vDomain.xxxx, vicp[0][4].zzzw
                mul r5.xy, vDomain.yyyy, vicp[1][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy
                mul r5.xy, vDomain.zzzz, vicp[2][4].zwzz
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- dout.WaveNormalTex0.x; r4.w <- dout.WaveNormalTex0.y
                mul r5.xy, vDomain.xxxx, vicp[0][5].xyxx
                mul r5.zw, vDomain.yyyy, vicp[1][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx
                mul r5.zw, vDomain.zzzz, vicp[2][5].xxxy
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- dout.WaveNormalTex1.x; r5.y <- dout.WaveNormalTex1.y
                
                #line 195
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                
                #line 203
                mov r1.w, l(20.000000)  // r1.w <- MipInterval
                mov r6.xyz, -cb0[12].xyzx
                add r6.xyz, r0.xyzx, r6.xyzx
                dp3 r2.w, r6.xyzx, r6.xyzx
                sqrt r2.w, r2.w
                mov r5.z, -r1.w
                add r2.w, r2.w, r5.z
                div r1.w, r2.w, r1.w
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(6.000000)  // r1.w <- mipLevel
                
                #line 207
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0, r1.w
                mov r2.w, r2.w  // r2.w <- h0
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xyzw, s0, r1.w
                mov r1.w, r1.w  // r1.w <- h1
                mul r2.w, r2.w, cb0[15].x
                add r2.w, r0.y, r2.w  // r2.w <- dout.PosW.y
                mul r1.w, r1.w, cb0[15].y
                add r0.y, r1.w, r2.w  // r0.y <- dout.PosW.y
                
                #line 214
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb1[8].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb1[9].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb1[10].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb1[11].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o4.xy, r3.xyxx
                mov o4.zw, r3.zzzw
                mov o5.xy, r4.xyxx
                mov o5.zw, r4.zzzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o6.xy, r5.xyxx
                ret 
                // Approximately 76 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gHeightScale0;               // Offset:  240 Size:     4 [unused]
                //   float gHeightScale1;               // Offset:  244 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:  248 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:  252 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:  256 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:  260 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform0;   // Offset:  320 Size:    64 [unused]
                //   float4x4 gWaveDispTexTransform1;   // Offset:  384 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform0; // Offset:  448 Size:    64 [unused]
                //   float4x4 gWaveNormalTexTransform1; // Offset:  512 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  576
                //       float4 Diffuse;                // Offset:  592
                //       float4 Specular;               // Offset:  608
                //       float4 Reflect;                // Offset:  624
                //
                //   } gMaterial;                       // Offset:  576 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap0                       texture  float4          2d    1        1
                // gNormalMap1                       texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1     zw        4     NONE   float       
                // TEXCOORD                 2   xy          5     NONE   float       
                // TEXCOORD                 3     zw        5     NONE   float     zw
                // TEXCOORD                 4   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[40], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.zw
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; v4.z <- pin.WaveDispTex0.x; v4.w <- pin.WaveDispTex0.y; 
                //   v5.x <- pin.WaveDispTex1.x; v5.y <- pin.WaveDispTex1.y; v5.z <- pin.WaveNormalTex0.x; v5.w <- pin.WaveNormalTex0.y; 
                //   v6.x <- pin.WaveNormalTex1.x; v6.y <- pin.WaveNormalTex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 227 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 230
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 233
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 236
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 243
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 250
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r2.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 258
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.zwzz, t1.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample0.x; r3.y <- normalMapSample0.y; r3.z <- normalMapSample0.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r4.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r5.xyz, r0.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z
                dp3 r1.w, r4.zxyz, r5.xyzx
                mul r6.xyz, r5.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r1.w, r4.xyzx, r4.xyzx
                rsq r1.w, r1.w
                mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- T.y; r4.y <- T.z; r4.z <- T.x
                mul r6.xyz, r4.yzxy, r5.yzxy
                mul r7.xyz, r4.xyzx, r5.zxyz
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r4.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r5.x  // r7.z <- TBN._m20
                mov r8.x, r4.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r5.y  // r8.z <- TBN._m21
                mov r5.x, r4.y  // r5.x <- TBN._m02
                mov r5.y, r6.z  // r5.y <- TBN._m12
                mov r5.z, r5.z  // r5.z <- TBN._m22
                
                #line 216
                dp3 r4.x, r3.xyzx, r7.xyzx  // r4.x <- bumpedNormalW.x
                dp3 r4.y, r3.xyzx, r8.xyzx  // r4.y <- bumpedNormalW.y
                dp3 r4.z, r3.xyzx, r5.xyzx  // r4.z <- bumpedNormalW.z
                mov r4.xyz, r4.xyzx  // r4.x <- <NormalSampleToWorldSpace return value>.x; r4.y <- <NormalSampleToWorldSpace return value>.y; r4.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 259 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r4.xyz, r4.xyzx  // r4.x <- bumpedNormalW0.x; r4.y <- bumpedNormalW0.y; r4.z <- bumpedNormalW0.z
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v6.xyxx, t2.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- normalMapSample1.x; r3.y <- normalMapSample1.y; r3.z <- normalMapSample1.z
                nop 
                mov r3.xyz, r3.xyzx
                mov r5.xyz, v3.yzxy
                
                #line 206 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 209
                mov r0.xyz, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                dp3 r1.w, r5.zxyz, r0.xyzx
                mul r6.xyz, r0.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                mul r6.xyz, r0.yzxy, r5.yzxy
                mul r7.xyz, r0.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r0.x  // r7.z <- TBN._m20
                mov r8.x, r5.x
                mov r8.y, r6.y
                mov r8.z, r0.y
                mov r0.x, r5.y  // r0.x <- TBN._m02
                mov r0.y, r6.z  // r0.y <- TBN._m12
                mov r0.z, r0.z  // r0.z <- TBN._m22
                
                #line 216
                dp3 r5.x, r3.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r3.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r3.xyzx, r0.xyzx  // r5.z <- bumpedNormalW.z
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 262 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW1.x; r5.y <- bumpedNormalW1.y; r5.z <- bumpedNormalW1.z
                add r0.xyz, r4.xyzx, r5.xyzx
                dp3 r1.w, r0.xyzx, r0.xyzx
                rsq r1.w, r1.w
                mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 274
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx
                mov r7.xyz, cb1[37].xyzx
                mov r8.xyzw, cb1[38].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[4].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 283
                nop 
                mov r6.xyz, cb1[36].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[37].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[38].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[8].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 66 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 70
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 73
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx
                
                #line 82
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r0.xyzx, r4.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                dp3 r4.w, r9.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                movc r7.xyz, r3.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r3.wwww, r8.xyzx, r14.xyzx
                
                #line 283 "C:\Users\Adam\Desktop\D3D11 Luna Samples\SelectedCodeSolutions\DisplacementMappedWaves\FX\Waves.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 286
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 291
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r2.xyz, r2.xyzx, r3.xyzx
                add r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- litColor.x; r2.y <- litColor.y; r2.z <- litColor.z
                
                #line 295
                mov r1.xyz, -r1.xyzx  // r1.x <- incident.x; r1.y <- incident.y; r1.z <- incident.z
                dp3 r1.w, r1.xyzx, r0.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r0.xyz, r0.xyzx, r1.wwww
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- reflectionVector.x; r0.y <- reflectionVector.y; r0.z <- reflectionVector.z
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- reflectionColor.x; r0.y <- reflectionColor.y; r0.z <- reflectionColor.z
                mul r0.xyz, r0.xyzx, cb1[39].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 309
                mov r1.x, -cb0[12].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[13].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- fogLerp
                
                #line 312
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[14].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                
                #line 316
                mul r0.w, r2.w, cb1[37].w  // r0.w <- litColor.w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 229 instruction slots used
                            
            };
        }

    }

}

